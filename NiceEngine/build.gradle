plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    flatDir {
        dirs 'libs'
    }
    jcenter()
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

project.ext.lwjglVersion = "3.2.3"
project.ext.jomlVersion = "1.10.4"
project.ext.lwjglNatives = "natives-windows"
project.ext.imguiVersion = '1.81.0'

dependencies {
    // Box2D
    implementation name: 'jbox2d-library'

    // GSON
    implementation 'com.google.code.gson:gson:2.8.6'

    // ImGUI stuff
    implementation "io.github.spair:imgui-java-app:$imguiVersion"

    // LWJGL stuff
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    // Reflections
    implementation 'org.reflections:reflections:0.10.2'

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"
}


/*
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes (
            'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
            'Main-Class': 'Main'
        )
    }

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task fatJar(type: Jar) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE

  manifest.from jar.manifest
  classifier = 'all'
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
  with jar
}

artifacts {
    archives fatJar
}
*/
